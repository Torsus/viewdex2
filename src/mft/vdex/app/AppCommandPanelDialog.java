/* @(#) AppCommandPanelDialog.java 01/28/2003
 *
 * Copyright (c) 2006 Sahlgrenska University Hospital.
 * All Rights Reserved.
 *
 */

/*
 * @author Sune Svensson.
 */

package mft.vdex.app;
         
import info.clearthought.layout.TableLayout;
import java.awt.*;
import javax.swing.*;
import java.awt.event.*;



public class AppCommandPanelDialog extends javax.swing.JDialog implements KeyListener{
    /** A return status code - returned if Cancel button has been pressed */
    public static final int RET_CANCEL = 0;
    /** A return status code - returned if OK button has been pressed */
    public static final int RET_OK = 1;
    protected java.awt.Frame parent;
    private String[] users = new String[10];
    protected JPanel commandPanel;
    protected JTabbedPane controlTabbedPane;
    protected JPanel studySubPanel1, catROCPanel, catNETPanel;
    protected JPanel catMGTPanel, catFROCPanel;
   
    private javax.swing.JPanel mainPanel;
    
    /** Creates new form CatLoginDialog */
    public AppCommandPanelDialog(){
        initComponents();
    }
    
    /** Creates new form CatLoginDialog */
    public AppCommandPanelDialog(java.awt.Frame xMedicalViewer, boolean modal){
        super(xMedicalViewer, modal);
        initComponents();
    }
    
    /** @return the return status of this dialog - one of RET_OK or RET_CANCEL */
    public int getReturnStatus() {
        return returnStatus;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
        double f = TableLayout.FILL;
        double p = TableLayout.PREFERRED;
        
        // Screen size
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Dimension d = toolkit.getScreenSize();
        int resolution = toolkit.getScreenResolution();
        
        float xScale = (float) d.width / 1280;
        float yScale = (float) d.height / 1024;
        
        int c300X = Math.round(400 * xScale);
        int a70X = Math.round(10 * yScale);
        
        // CommandPanelWidth IMPORTENT IMPORTENT
        int commandPanelWidth = Math.round(325 *xScale);
        int space = Math.round(3 * yScale);
        int catStudyAdminSize = Math.round(65 * yScale);
        
        // commandPanel
        commandPanel = new JPanel();
        double sizecm[][] = {{3, commandPanelWidth, 3},
        {catStudyAdminSize, space, f}};
        
        commandPanel.setLayout(new TableLayout(sizecm));
        
        //commandPanel.setMaximumSize(new java.awt.Dimension(sizeY, sizeX));
        //commandPanel.setMinimumSize(new java.awt.Dimension(sizeY, sizeX));
        //commandPanel.setPreferredSize(new java.awt.Dimension(sizeY, sizeX));
        getContentPane().add(commandPanel, java.awt.BorderLayout.SOUTH);
        
        
        // AdminPanel
        //catStudyAdmin = new CatStudyAdmin(catMain);
        //commandPanel.add(catStudyAdmin, "1,0");
        
       
        // CreateStudySubPanel
        catMGTPanel = new JPanel();
        double sizemgt[][] ={{TableLayout.FILL},{0,TableLayout.FILL}};
        catMGTPanel.setLayout(new TableLayout(sizemgt));
        
        catFROCPanel = new JPanel();
        double sizefroc[][] ={{TableLayout.FILL},{0,TableLayout.FILL}};
        catMGTPanel.setLayout(new TableLayout(sizefroc));
        
        
        //listener
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });
        
        //pack();
        //this.hide();
    }
    
    // NOT WORKING
    protected void setCommandPanelWidth(int width){
        Dimension size = new Dimension(width, 400);
        commandPanel.setSize(size);
    }
    
  /*private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {
    doClose(RET_OK);
  }*/
    
  /*private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {
    doClose(RET_CANCEL);
  }*/
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {
        doClose(RET_CANCEL);
    }
    
    /**
     * 
     * @param retStatus 
     */
    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        //new CatLoginDialog(new javax.swing.JFrame(), true).show();
    }
    
    
    // Variables declaration - do not modify
    // End of variables declaration
    
    private int returnStatus = RET_CANCEL;
   
    /**
     *  Gets font scaled for screen resolution
     * @param fontName              Logical font name i.e. SansSerif
     * @param fontStyle             Font class style defines
     * @param pointSizeFor1280Mode  How big in 1280 * 1024 resolution
     * @return                      The scaledFont value
     */
    public Font getScaledFont(String fontName, int fontStyle, int pointSizeFor1280Mode){
        Font f = new Font(fontName, fontStyle, pointSizeFor1280Mode);
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        if(d.height == 1024)
            return f;
        else{
            int numerator = pointSizeFor1280Mode * d.height;
            float sizeForCurrentResolution = (float)numerator/1024;
            return f.deriveFont(sizeForCurrentResolution);
        }
    }
    
    // NOT IN USE TEST
    public void setCommandPanelWidth(){
        double f = TableLayout.FILL;
        double p = TableLayout.PREFERRED;
        
        // Screen size
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Dimension d = toolkit.getScreenSize();
        int resolution = toolkit.getScreenResolution();
        
        float xScale = (float) d.width / 1280;
        float yScale = (float) d.height / 1024;
        
        int c300X = Math.round(400 * xScale);
        int a70X = Math.round(10 * yScale);
        
        // CommandPanelWidth IMPORTENT IMPORTENT
        int commandPanelWidth = Math.round(300 *xScale);
        int space = Math.round(3 * yScale);
        int catStudyAdminSize = Math.round(65 * yScale);
        
        double sizecm[][] = {{3, commandPanelWidth, 3}, {catStudyAdminSize, space, f}};
        
        commandPanel.setLayout(new TableLayout(sizecm));
    }
    
    @Override
    public void keyPressed(KeyEvent e) {
    }
    
    @Override
    public void keyReleased(KeyEvent e) {
    }
    
    /**
     * 
     * @param e 
     */
    @Override
    public void keyTyped(KeyEvent e) {
        System.out.println("CatCommandPanelDialog: keyTyped");
        
        int keyCode = e.getKeyCode();
        if(keyCode == KeyEvent.VK_SHIFT){
            this.hide();
        }
    }
    
}
