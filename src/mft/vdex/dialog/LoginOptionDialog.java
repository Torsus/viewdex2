/* @(#) LoginDialog.java 01/28/2003
 *
 * Copyright (c) 2006 Sahlgrenska University Hospital.
 * All Rights Reserved.
 *
 */

/*
 * @author Sune Svensson.
 */
package mft.vdex.dialog;

import info.clearthought.layout.TableLayout;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import mft.vdex.app.AppMainLogin;
import mft.vdex.app.AppMainOptionLogin;
import mft.vdex.app.ViewDex;
import mft.vdex.modules.vg.VgHistoryOptionType;
import mft.vdex.modules.vg.VgRunMode;

public class LoginOptionDialog extends javax.swing.JDialog implements ActionListener, VgHistoryOptionType {

    /** A return status code - returned if Cancel button has been pressed */
    public static final int RET_CANCEL = 0;
    /** A return status code - returned if OK button has been pressed */
    public static final int RET_OK = 1;
    protected java.awt.Frame parent;
    private String[] users = new String[100];
    private String userName;
    protected ViewDex viewDex;
    AppMainOptionLogin appMainOptionLogin;
    private double f = TableLayout.FILL;
    private double p = TableLayout.PREFERRED;
    static String historyOptionStr = "History option";
    static String originalStr = "Original";
    static String editedStr = "Edited";
    static String continueStr = "Go";
    private int historyOption = 0;

    public LoginOptionDialog() {
        initComponents();
    }

    public LoginOptionDialog(ViewDex viewDex, boolean modal) {
        super(viewDex, modal);
        this.viewDex = viewDex;
        initComponents();
    }

    public LoginOptionDialog(AppMainOptionLogin appMainOptionLogin,
            ViewDex viewDex, boolean modal, String userName) {
        super(viewDex, modal);
        this.viewDex = viewDex;
        this.userName = userName;
        this.appMainOptionLogin = appMainOptionLogin;
        initComponents();
    }

    /** @return the return status of this dialog - one of RET_OK or RET_CANCEL */
    public int getReturnStatus() {
        return returnStatus;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
        int y1, y2, y4, y5, y6, y7;

        // Screen size
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Dimension d = toolkit.getScreenSize();
        float xScale = (float) d.width / 1280;
        float yScale = (float) d.height / 1024;
        int sizeY = Math.round(70 * yScale);

        //System.out.println("xScale: " + xScale);
        //System.out.println("yScale: " + yScale);

        int x1 = Math.round(35 * xScale);
        int x2 = Math.round(180 * xScale);
        int x3 = Math.round(30 * xScale);
        int x4 = Math.round(40 * xScale);
        int x5 = Math.round(10 * xScale);

        y1 = Math.round(10 * yScale);
        y2 = Math.round(25 * yScale);
        int y3 = Math.round(23 * yScale);
        y4 = Math.round(8 * yScale);
        y5 = Math.round(30 * yScale);
        y6 = Math.round(10 * yScale);
        y7 = Math.round(80 * yScale);

        //if(xMedicalViewer.getRunMode() == "EXTENDED"){
        if (false) {
            y1 = Math.round(8 * yScale);
            y2 = Math.round(22 * yScale);
            y4 = Math.round(4 * yScale);
            y5 = Math.round(28 * yScale);
        }

        // Panel
        pwPanel = new javax.swing.JPanel();
        double size[][] = {{x1, x2, x3, x4, x5}, {y1, y2, y3, y4, y5, y6, y7, y1}};
        pwPanel.setLayout(new TableLayout(size));
        //pwPanel.setBackground(new Color(255,0,0));

        // Password
        passwordField = new javax.swing.JPasswordField();
        pwLabel = new javax.swing.JLabel();
        //okButton = new javax.swing.JButton();
        //cancelButton = new javax.swing.JButton();

        // panel size
        //int h = Math.round(350 * xScale);
        //pwPanel.setMaximumSize(new java.awt.Dimension(h, 70));
        //pwPanel.setMinimumSize(new java.awt.Dimension(h, 70));
        //pwPanel.setPreferredSize(new java.awt.Dimension(h, 70));

        //password
        passwordField.setColumns(5);
        passwordField.setAlignmentX(20.0F);
        //passwordField.setMaximumSize(new java.awt.Dimension(400, 30));
        passwordField.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        Font echoCharFont = getScaledFont("Lucida Sans", Font.PLAIN, 12);
        //Font echoCharFont = new Font("Lucida Sans", Font.PLAIN, 12);
        passwordField.setFont(echoCharFont);
        passwordField.setEchoChar('\u2022');
        passwordField.setText(userName);
        //passwordField.setEditable(false);
        passwordField.setEnabled(false);

        passwordField.addActionListener(new java.awt.event.ActionListener() {

            @Override
            public void actionPerformed(java.awt.event.ActionEvent e) {
                doClose(RET_CANCEL);
            }
        });

        // Login
        pwLabel.setText("Login option");
        //pwLabel.setFont(new java.awt.Font("Albany", 0, 12));
        Font dialogFont = getScaledFont("Dialog", Font.PLAIN, 20);
        pwLabel.setFont(dialogFont);
        pwLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        //pwLabel.setMaximumSize(new java.awt.Dimension(250, 20));

        // Exit
        JButton continueButton = new JButton(continueStr);
        Font buttonFont = getScaledFont("Dialog", Font.PLAIN, 14);
        continueButton.setFont(buttonFont);
        continueButton.setFocusable(false);
        continueButton.addActionListener(new java.awt.event.ActionListener() {

            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continueButtonActionPerformed(evt);
            }
        });

        // Listener
        addWindowListener(new java.awt.event.WindowAdapter() {

            @Override
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        /***************************************************************
         *  optionPanel
         **************************************************************/
        // font
        Font borderFont = getScaledFont("SanSerif", Font.PLAIN, 14);
        Font radioButonFont = getScaledFont("SanSerif", Font.PLAIN, 14);

        // border
        TitledBorder tborder = BorderFactory.createTitledBorder(historyOptionStr);
        tborder.setTitleFont(borderFont);

        //double[][] size2 = {{f,p}, {f}};
        JPanel optionPanel = new JPanel(new GridLayout(0, 1));
        this.setBackground(new Color(0, 0, 100));
        //this.setBackground(new Color(110,20,20));
        //optionPanel.setLayout(new TableLayout(size2));
        optionPanel.setBorder(tborder);

        //Create the radio buttons.
        JRadioButton originalButton = new JRadioButton(originalStr);
        originalButton.setFont(radioButonFont);
        originalButton.setMargin(new Insets(0, 0, 0, 0));
        originalButton.setIconTextGap(10);
        //originalButton.setMnemonic(KeyEvent.VK_B);
        originalButton.setActionCommand(originalStr);
        originalButton.setSelected(true);
        historyOption = VgHistoryOptionType.HISTORY_OPTION_ORIGINAL;

        JRadioButton editedButton = new JRadioButton(editedStr);
        editedButton.setFont(radioButonFont);
        editedButton.setIconTextGap(10);
        //editedButton.setMnemonic(KeyEvent.VK_C);
        editedButton.setActionCommand(editedStr);

        // Find out if an 'edit history' file already exist
        if(viewDex.appMainAdmin.userNameHistoryEditExist(userName)){
            originalButton.setEnabled(true);
            editedButton.setEnabled(true);
        }
        else{
            originalButton.setEnabled(true);
            editedButton.setEnabled(false);
        }

        /*
        if (viewDex.appMainAdmin.vgControl.getRunModeStatus() == VgRunMode.CREATE_EXIST) {
            originalButton.setEnabled(false);
            editedButton.setEnabled(false);
        } else {
            if (viewDex.appMainAdmin.vgControl.getRunModeStatus() == VgRunMode.SHOW_EXIST
                    && !viewDex.vgHistoryEdit.historyEditExist()) {
                originalButton.setEnabled(true);
                editedButton.setEnabled(false);
            } else {
                if (viewDex.appMainAdmin.vgControl.getRunModeStatus() == VgRunMode.SHOW_EXIST
                        && viewDex.vgHistoryEdit.historyEditExist()) {
                    originalButton.setEnabled(true);
                    editedButton.setEnabled(true);
                } else {
                    if (viewDex.appMainAdmin.vgControl.getRunModeStatus() == VgRunMode.EDIT_EXIST
                            && viewDex.vgHistoryEdit.historyEditExist()) {
                        originalButton.setEnabled(true);
                        editedButton.setEnabled(true);
                    }
                }
            }
        }*/

        //Group the radio buttons.
        ButtonGroup group = new ButtonGroup();
        group.add(originalButton);
        group.add(editedButton);

        //Register a listener for the radio buttons.
        originalButton.addActionListener(this);
        editedButton.addActionListener(this);

        //Put the radio buttons in a column in a panel.
        JPanel radioPanel = new JPanel(new GridLayout(0, 1));
        radioPanel.add(originalButton);
        radioPanel.add(editedButton);

        optionPanel.add(radioPanel);

        // Add panels
        pwPanel.add(continueButton, "2,1,3,1");
        pwPanel.add(pwLabel, "1,2,2,2");
        pwPanel.add(passwordField, "1,4,2,4");
        pwPanel.add(optionPanel, "1,6,2,6");

        //okButton.setText("OK");
    /*okButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
        okButtonActionPerformed(evt);
        }
        });*/

        //pwPanel.add(okButton);

        /*cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
        cancelButtonActionPerformed(evt);
        }
        });*/

        //buttonPanel.add(cancelButton);

        getContentPane().add(pwPanel, java.awt.BorderLayout.SOUTH);
        //pack();
    }

    /**
     * RadioButton actionPerformed
     * @param e
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getActionCommand().equals(originalStr)) {
            passwordField.requestFocusInWindow();
            historyOption = VgHistoryOptionType.HISTORY_OPTION_ORIGINAL;
        } else if (e.getActionCommand().equals(editedStr)) {
            passwordField.requestFocusInWindow();
            historyOption = VgHistoryOptionType.HISTORY_OPTION_EDITED;
        }
    }

    /*private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {
    doClose(RET_OK);
    }*/
    /*private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {
    doClose(RET_CANCEL);
    }*/
    /** Closes the dialog */
    public void closeDialog(java.awt.event.WindowEvent evt) {
        doClose(RET_CANCEL);
    }

    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    /** exitButtonActionPerformed
     * Actions then the Exit button  is pressed.
     */
    private void continueButtonActionPerformed(java.awt.event.ActionEvent evt) {
        appMainOptionLogin.userGo(historyOption);
        doClose(RET_CANCEL);
        //System.exit(0);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        //new CatLoginDialog(new javax.swing.JFrame(), true).show();
    }

    // -------------------------------------------------------------------
    // getScaledFont
    // -------------------------------------------------------------------
    /**
     *  Gets font scaled for screen resolution
     * @param fontName              Logical font name i.e. SansSerif
     * @param fontStyle             Font class style defines
     * @param pointSizeFor1280Mode  How big in 1280 * 1024 resolution
     * @return                      The scaledFont value
     */
    public Font getScaledFont(String fontName, int fontStyle, int pointSizeFor1280Mode) {
        Font f = new Font(fontName, fontStyle, pointSizeFor1280Mode);
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        if (d.height == 1024) {
            return f;
        } else {
            int numerator = pointSizeFor1280Mode * d.height;
            float sizeForCurrentResolution = (float) numerator / 1024;
            return f.deriveFont(sizeForCurrentResolution);
        }
    }
    // Variables declaration - do not modify
    //private javax.swing.JButton okButton;
    //private javax.swing.JButton cancelButton;
    private javax.swing.JPanel pwPanel;
    private javax.swing.JLabel pwLabel;
    private javax.swing.JPasswordField passwordField;
    // End of variables declaration
    private int returnStatus = RET_CANCEL;
}
