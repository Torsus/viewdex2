@version 2.45
########################################################################
#                         Study Properties
########################################################################
# Properties that can be edited in order to define the study. To avoid any annoying 
# "irreversible" changes, please make a copy of the original property file before editing the 
# file.
# 
#
# For information about how to assign observers to a study, please see the file
# "user.properties".

############################ IMAGEDB ###################################
#
# Image directories are freely defined, but are preferably named by the
# name of the study followed by "-main" or "-demo".
# For example, for a study named "ROC" the main and demo directories
# are called "ROC-main" and "ROC-demo" respectively. See below where
# image directories for the study named "ROC" are defined. 

# Default value (.\\imagedb\\'name of the study'-main)
imagedb.directory.main = .\\imagedb\\ROC-main

# Default value (.\\imagedb\\'name of the study'-demo)
imagedb.directory.demo = .\\imagedb\\ROC-demo

# Another location of the images can also be used. In this case the complete 
# search path to the images must be given. For example,


# imagedb.directory.main = c:\\ViewDEX\\imagedb\\ROC-main
# imagedb.directory.demo = c:\\ViewDEX\\imagedb\\ROC-demo


########################### LOG/History ################################
# A log file is created for each user and contains the answers recorded
# for each case and for each image within the case. The output is
# generated in text format There are six default values logged into the log file (start date and 
# time, present user, image filename, read order of cases, and given answer/score and 
# locations).Additionally, it is also possible to log any DICOM tag value, window
# settings used when answers where given and time spent viewing each case.
# This can be edited further down in this property file
#
# The history file is the file used by ViewDEX to keep track of every 
# users status in the study, for example the unique randomization of cases for each user.

# Two log files are created, log1 and log2. The locations of the log files can be chosen 
# individually for each log file. It is recommended to separate the locations of the two log 
# files and place them, for example, on different hard drives. This will minimize the risk of 
# data loss due to computer failure (hard drive errors).


#-----------------------------------------------------------------------
#                    Log/History directories
#-----------------------------------------------------------------------
# Define the root directory for the primary log and history files.
# Default value (.\\)
log.log1-directory = .\\

# Define the root directory for the backup log and history files.
# This is not a mandatory property. If not defined a message will appear
# at start up of study. If not wanted please enter a "#" at beginning of
# line.
# Default value (.\\log2)
log.log2-directory = .\\log2

# In the definitions above, the path is given relative to the location of this property file.


############################## MENU ####################################
# Define the menu panel size, font and color. The color is defined by the red, 
# green and blue components, using a 0-255 scale, eg. 20,20,20.


# Menu panel vertical size, font and colors
# Default value (30)
app.menu.panel.vertical.size = 40

# Default value (240, 240, 240)
app.menu.panel.color = 211, 211, 211
 
# Default value (SansSerif-plain-16)
app.menu.font =

# Default value (0,0,0)
app.menu.font.color =

########################## CONTROL PANEL ###############################
# Define the control panel containing the subpanels Cine-loop, Window-Level,
# Pan, Zoom and Localization.

# Control panel width and color. The color is defined by the red, green and blue components,
# using a 0-255 scale, eg. 20,20,20.

# Default value (350)
controlpanel.width = 400

# Default value (240,240,240)
controlpanel.color = 211, 211, 211

########################### MAIN PANEL #################################
# Define the color of the main panel. The color is defined by the red, 
# green and blue components, using a 0-255 scale, eg. 20,20,20.

# Default value (240, 240, 240)
mainpanel.color = 211, 211, 211

############################ RUN PANEL #################################
# The run panel contains a case counter (shows the number of the selected
# case and the total number of cases in the study), an image counter
# (shows the number of the selected image in the case and the total
# number of images within the case), a "Next" button (to move on to the next 
# case in the study) and a stop button (interrupts the study and opens the login dialog).
# For some review modes (Show-mode or Edit-mode) a "Go to" button and a 
# "Previous" button is also shown.

# Define the location and colors of the run panel. The color is defined by the red, 
# green and blue components, using a 0-255 scale, eg. 20,20,20.

# Default value (0)
runpanel.space.top = 0

# Default value (5)
runpanel.panel.alignment.left =

# Default value (5)
runpanel.panel.alignment.right =

# Default value (240,240,240)
runpanel.panel.color = 211,211,211

# Default value (120,120,120)
runpanel.border.color =

# Default value (0,0,0)
runpanel.label.text.color =


# Define the text font, text size and placement of the text in the run panel

# Run panel text font
# Default value (Arial-plain-20)
runpanel.label.text.font = Arial-plain-15

# Run panel size
# Default value (20)
runpanel.stackinfo.size.horizontal = 90

# Gap between texts regarding case information
# Default value (1)
runpanel.stackinfo.gap.horizontal =

# Location of the text regarding case information
# Default value (1)
runpanel.stackinfo.alignment.right =

# Location of the text regarding image information
# Default value (10)
runpanel.imageinfo.size.horizontal = 90

# Gap between texts regarding image information
# Default value (1)
runpanel.imageinfo.gap.horizontal =

# Location and size of the text regarding image information and the background 
# reading of loaded images
# Default value (1)
runpanel.imageinfo.alignment.right =

# Default value(10)
runpanel.imageinfo.backgroundreading.size.horizontal = 50

# Default value (1)
runpanel.imageinfo.backgroundreading.alignment.right = 26


# Define the appearance of the buttons (color, size, text size and font) in the run panel

# Button color
# Default value (system dependent)
runpanel.button.color =

# Button text color
# Default value (10,10,10)
runpanel.button.text.color =

# Button border color
# Default value (system dependent)
runpanel.button.border.color =

# Button text font
# Default value (Arial-plain-16)
runpanel.button.font =

# Button size
# Default value (125, 35)
runpanel.button.size = 75, 25

# Button location
# Default value (1)
runpanel.button.alignment.right = 10


#----------------------- Next button -----------------------------------
# Define the appearance of the "Next" button

# Location of the panel where the "Next" button is located
# Default value (3)
studyselectpanel.space.top =

# Color of the panel where the "Next" button is located
# Default value (240,240,240)
studyselectpanel.color = 211, 211, 211

# "Next" button color
# Default value (system dependent)
studyselectpanel.next.button.color =

# "Next" button border color
# Default value (system dependent)
studyselectpanel.next.button.border.color =

# "Next" button text color
# Default value (10,10,10)
studyselectpanel.next.button.text.color =

# "Next" button text font
# Default value (Arial-plain-26)
studyselectpanel.next.button.font =

# "Next" button size
# Default value (160, 38)
studyselectpanel.next.button.size =


#----------------------- Go to & Prev button ---------------------------
#
# Only applicable in "edit mode". The creator of the study can edit the aswers given by 
# an observer by using the login name of the user + the ending "edit", for example "samedit".
# In the "Edit mode" the study creator can review the answers given by the observers and also
# change the answers. The feature might be of value in the case where an observer by mistake
# has made a wrong judgement to a case. By enabelling the "studyselectextended" one text field
# and one button are created in the top of the run panel. In the text field ("GO to") it is possible
# to write the number of the case that need to be reviewed. The button ("Prev-button") is used
# to go to the previous case in the study.

# Enable the "Go to" text field and the "Prev" button 
# Default value (no)
studyselectextended = n

# Location, color and font of the studyselectextended panel. The color is defined by the red, 
# green and blue components, using a 0-255 scale, eg. 20,20,20.

# Default value (3)
studyselectextendedpanel.space.top =
# Default value (240,240,240)
studyselectextendedpanel.color = 211, 211, 211
# Default value (0)
studyselectextendedpanel.alignment.top =
# Default value (10)
studyselectextendedpanel.alignment.bottom =
# Default value (5)
studyselectextendedpanel.alignment.left =
# Default value (5)
studyselectextendedpanel.alignment.right =
# Default value (120,120,120)
studyselectextendedpanel.border.color =
# Default value (10,10,10)
studyselectextendedpanel.title.color =
# Default value (SansSerif-plain-16)
studyselectextendedpanel.title.font =

# Location, color and font of the "Go to" text field
# Default value (5)
studyselectextendedpanel.goto.label.alignment.left =
# Default value (SansSerif-plain-16)
studyselectextendedpanel.goto.label.font =
# Default value (230,230,230)
studyselectextendedpanel.goto.input.color =
# Default value (40)
studyselectextendedpanel.goto.input.size = 
# Default value (5)
studyselectextendedpanel.goto.input.alignment.left = 
# Default value (SansSerif-plain-16)
studyselectextendedpanel.goto.input.font =
# Default value (120,120,120)
studyselectextendedpanel.goto.border.color =

# Location, color and font of the "Prev" button
# Default value (system dependent)
studyselectextendedpanel.prev.button.color =
# Default value (system dependent)
studyselectextendedpanel.prev.button.border.color =
# Default value (10,10,10)
studyselectextendedpanel.prev.button.text.color =
# Default value (Arial-plain-18)
studyselectextendedpanel.prev.button.font =
# Default value (160, 38)
studyselectextendedpanel.prev.button.size =
# Default value (5)
studyselectextendedpanel.prev.button.alignment.right =


############################ TASK PANEL ################################
#
# The task panel is the panel in which the observers provide their answers when 
# reviewing the images. The task panel is divided into a number of sub panels 
# (task text, task checkbox, and task clarification). 
# Any number of tasks can be inserted. A scroll list is automatically embedded if needed.

#-----------------------------------------------------------------------
#                        Task panel - text and checkbox text
#-----------------------------------------------------------------------
 
# Define tasks according to given examples.
# Define checkbox text. The checkbox text should be short 
# (preferably only a few characters) to fit inside the checkbox.
# 

# Font definition
# The following items concerning fonts can be modified: fontname, style,
# and fontsize.
# 
# Fontname - a font family name.
# Style - one of the four case-insensitive strings: "plain", "bold", 
# "bolditalic", "italic".
# Fontsize - a positive decimal integer representation of the font size.
# Examples Arial-plain-12, Dialog-bold-14, SansSerif-italic-14.

# Example of a task definition. The task for the observers to answer is here defined,
# together with the number of checkboxes and the text in the checkboxes. Here it is also 
# possible to determine wether or not the task should be connected to localization (y or n).

# taskpanel.task1.text = x) Is case normal or abnormal?
# taskpanel.task1.text.font = SansSerif-plain-18
# taskpanel.task1.checkbox.text = 1, 2, 3, 4, 5
# taskpanel.task1.checkbox.text.font = SansSerif-plain-18
# taskpanel.task1.localization = n
# The above defined example is used for the first task of this test study

# Default values for all tasks: text.font (SansSerif-plain-20)
# Default values for all tasks: checkbox.text.font (SansSerif-plain-16)
# Default values for all tasks:.localization (no)

# The tasks below (task2, task3 etc) can be edited according to given
# instructions and examples above. To activate a task, delete the "#" 
# in the beginning of each line. Additional tasks can be added if needed.

taskpanel.task1.text = A) Is case normal or abnormal?
taskpanel.task1.text.font = SansSerif-plain-18
taskpanel.task1.checkbox.text = 1, 2, 3, 4, 5
taskpanel.task1.checkbox.text.font =
taskpanel.task1.localization = n

# taskpanel.task2.text = 1) Is case normal or abnormal?
# taskpanel.task2.text.font =
# taskpanel.task2.checkbox.text = 1, 2, 3, 4, 5
# taskpanel.task2.checkbox.text.font =
# taskpanel.task2.localization = n

# taskpanel.task3.text = 2) Is case normal or abnormal?
# taskpanel.task3.text.font =
# taskpanel.task3.checkbox.text = 1, 2, 3, 4, 5
# taskpanel.task3.checkbox.text.font =
# taskpanel.task3.localization = n
#

#-----------------------------------------------------------------------
#                        Task panel - graphical properties
#-----------------------------------------------------------------------
# Define colors, size and location of the task panel. The color is defined by the red, 
# green and blue components, using a 0-255 scale, eg. 20,20,20.

# Default value 400
taskpanel.vertical.size =

# Task panel location
# Default value (5)
taskpanel.space.top =
# Default value (5)
taskpanel.alignment.left =
# Default value (5)
taskpanel.alignment.right =

# Task panel colors
# Default value (240,240,240)
taskpanel.color = 211, 211, 211
# Default value (240,240,240)
taskpanel.mainpanel.color = 211, 211, 211
# Default value (120,120,120)
taskpanel.border.color =
# Default value (0,0,0)
taskpanel.task.text.color =
# Default value (240,240,240)
taskpanel.textpanel.color = 211, 211, 211

# Checkbox colors, size and location
# Default value (240,240,240)
taskpanel.checkbox.color =
# Default value (240,240,240)
taskpanel.checkbox.panel.color = 211, 211, 211
# Default value (20,20,20)
taskpanel.checkbox.border.color = 32, 58, 58
# Default value (0,0,0)
taskpanel.checkbox.text.color =
# Default value (none)
taskpanel.checkbox.size = 30, 26
# Default value (6)
taskpanel.checkbox.horizontal.alignment =
# Default value (6)
taskpanel.checkbox.vertical.alignment.top =
# Default value (0)
taskpanel.checkbox.vertical.alignment.bottom =
# Default value (180,180,180)
taskpanel.checkbox.select.color =

#-----------------------------------------------------------------------
#                      Task panel - Checkbox clarification
#-----------------------------------------------------------------------
# Define clarification to checkbox symbols. The clarification text will be 
# presented in a box below the defined tasks.

# Default values for all clarification text.fonts (Dialog-plain-14)

# Example of clarifications of checkbox symbols
taskpanel.clarification1.text = (1), Confidence level
taskpanel.clarification1.text.font = Arial-plain-18

taskpanel.clarification2.text = 1, Very confident case is normal
taskpanel.clarification2.text.font = Arial-plain-16

taskpanel.clarification3.text = 2, Confident case is normal
taskpanel.clarification3.text.font = Arial-plain-16

taskpanel.clarification4.text = 3, Somewhat confident case is abnormal
taskpanel.clarification4.text.font = Arial-plain-16

taskpanel.clarification5.text = 4, Confident case is abnormal
taskpanel.clarification5.text.font = Arial-plain-16

taskpanel.clarification6.text = 5, Very confident case is abnormal
taskpanel.clarification6.text.font = Arial-plain-16

# Define Size, location and colors of the clarification panel
# Default value (5)
taskpanel.clarificationpanel.space.top =
# Default value (200)
taskpanel.clarificationpanel.vertical.size = 220
# Default value (1)
taskpanel.clarificationpanel.alignment.left = 10
# Default value (1)
taskpanel.clarificationpanel.alignment.right = 10

# Default value (240,240,240)
taskpanel.clarificationpanel.color = 211, 211, 211
# Default value (236,233,216)
taskpanel.clarificationpanel.textpanel.color =



#-----------------------------------------------------------------------
#                      Notes panel
#-----------------------------------------------------------------------
# Text panel in which the observers can write a notation regarding a case. 
# The text written in the notes panel will be stored in the log file.  
# The text input is related to the current displayed case. The notation can only 
# be made on case level and (if image stacks are used) not on single images.
# 
# If you choose to create a notes. panel, define colors, size and location of panel. 
# The color is defined by the red, green and blue components, using a 0-255 scale, eg. 20,20,20.

# Specify if a notes panel should be created.
#Default value (no)
notespanel = y

# Location and size of the notes panel
#Default value (5)
notespanel.space.top =
#Default value (80)
notespanel.vertical.size =
#Default value (1)
notespanel.alignment.left = 10
#Default value (1)  
notespanel.alignment.right = 10

# Font and color of the notes panel
# Default value (Dialog-plain-14)
notespanel.font = Dialog-plain-14
#Default value (240,240,240)
notespanel.color = 211,211,211
#Default value (236,233,216)
notespanel.textpanel.color =



############################ FUNCTION PANEL ############################
#
# The function panel is located below the task panel and is divided into 
# a number of sub panels hosting each enabled function (cine-loop, 
# Window/Level, Pan, Zoom, and Localization).

# Define color and location of the function panel. The color is defined by the red, 
# green and blue components, using a 0-255 scale, eg. 20,20,20.

# Function panel color and location
# Default value (240,240,240)
functionpanel.panel.color = 211, 211, 211

# Default value (3)
functionpanel.alignment.left =

# Default value (3)
functionpanel.alignment.right =

#-----------------------------------------------------------------------
#                    Window Width/ Window Level
#-----------------------------------------------------------------------
#
# Enable the possibility for the observers to change WW/WL 
# by mouse, "yes"/"y" or "no"/"n". 
# Right mouse button will be used to perform the WW/WL changes 
# (click and hold the right mouse button while moving 
# the mouse over the screen). If enabled ("yes"/"y") a reset button will be added.
# to the function panel. The reset button will reset the changes in WW/WL to 
# the values given by the image Dicom information. Buttons for additional 
# WW/WL settings can be added to the function panel if the image Dicom 
# data contains multiple window settings, 

# Enable possibility to change WW/WL
# Default value (yes)
functionpanel.wl.mouse =

# Add buttons for additional window settings.
# The buttons will only be present if the image contains multiple window settings.

# Default value (no)
functionpanel.wl.additional-ww-wc = n

# Name of additional WW/WL button/s. 

functionpanel.wl.additional-ww-wc.button1.name = Soft
functionpanel.wl.additional-ww-wc.button1.font = Arial-plain-12

functionpanel.wl.additional-ww-wc.button2.name = Medium
functionpanel.wl.additional-ww-wc.button2.font = Arial-plain-12

functionpanel.wl.additional-ww-wc.button3.name = Hard
functionpanel.wl.additional-ww-wc.button3.font = Arial-plain-12

# Size of additional WW/WL button(s)
# Default value (90, 25)
functionpanel.wl.additional-ww-wc.button.size =

# Location of the WW/WL button(s)
# Default value (5)
functionpanel.wl.space.top =
# Default value (0)
functionpanel.wl.panel.alignment.top =
# Default value (5)
functionpanel.wl.panel.alignment.bottom = 10

# WW/WL panel colors and font
# Default value (240,240,240)
functionpanel.wl.panel.color = 211, 211, 211
# Default value (120,120,120)
functionpanel.wl.border.color =
# Default value (SansSerif-plain-16)
functionpanel.wl.title.font =
# Default value (10,10,10)
functionpanel.wl.title.color =

# WW/WL button colors, fonts and sizes
# Default value (system dependent)
functionpanel.wl.button.color =
# Default value (10,10,10)
functionpanel.wl.button.text.color =
# Default value (system dependent)
functionpanel.wl.button.border.color =
# Default value (Arial-plain-16)
functionpanel.wl.button.font =
# Default value (90,25)
functionpanel.wl.button.size =
# Default value (5)
functionpanel.wl.button.vertical.space =


# Mouse motion window/level mapping
# This property will affect the "sensitivity" of the window settings operation.

# Default value (3.0)
canvas.wl.mapconstant =

#-----------------------------------------------------------------------
#                              Pan
#-----------------------------------------------------------------------
# Enable the possibility for the observers to pan the images 
# by mouse, "yes" or "no". 
# Left mouse button will be used to pan the images 
# (click and hold the left mouse button while moving 
# the mouse over the screen). If enabled ("yes"/"y") a reset button 
# will be added to the function panel. 


# Enable possibility to pan the image
# Default value (yes)
functionpanel.pan =

# Location of the pan reset button
# Default value (5)
functionpanel.pan.space.top =
# Default value (0)
functionpanel.pan.panel.alignment.top =
# Default value (7)
functionpanel.pan.panel.alignment.bottom =

# Colors and font of the pan panel
# Default value (240,240,240)
functionpanel.pan.panel.color = 211, 211, 211
# Default value (120,120,120)
functionpanel.pan.border.color =
# Default value (10,10,10)
functionpanel.pan.title.color =
# Default value (SansSerif-plain-16)
functionpanel.pan.title.font =

# Pan reset button colors, font and size
# Default value (system dependent)
functionpanel.pan.button.color =
# Default value (10,10,10)
functionpanel.pan.button.text.color =
# Default value (system dependent)
functionpanel.pan.button.border.color = 
# Default value (Arial-plain-16)
functionpanel.pan.button.font =
# Default value (90,25)
functionpanel.pan.button.size =

#-----------------------------------------------------------------------
#                             Zoom
#-----------------------------------------------------------------------

# Enable the possibility for the observers to use a zoom-function.
# The zoom in and zoom out features will be enabled and activation
# "buttons" will be created in the function panel. To use the zoom function
# the observers click the "zoom in" or "zoom out" buttons. The zooming
# is then performed by clicking with the mouse cursor anywhere in the image. 

# Default value (yes)
functionpanel.zoom.in =

# Default value (yes)
functionpanel.zoom.out =

# Specify if a zoom reset button shall be added.
# If "yes" a reset button will be created in the function panel.
# If the zoom reset button is activated the image is displayed in the
# size defined as default display size.
# Default value (yes) 
functionpanel.zoom.reset =

Location, colors and font of the zoom panel
# Default value (5)
functionpanel.zoom.space.top =
# Default value (240,240,240)
functionpanel.zoom.panel.color = 211, 211, 211
# Default value (0)
functionpanel.zoom.panel.alignment.top =
# Default value (5)
functionpanel.zoom.panel.alignment.bottom =
# Default value (120,120,120)
functionpanel.zoom.border.color =
# Default value (10,10,10)
functionpanel.zoom.title.color =
# Default value (SansSerif-plain-16)
functionpanel.zoom.title.font =

# Zoom buttons colors, fonts and sizes
# Default value (system dependent)
functionpanel.zoom.button.color =
# Default value (10,10,10)
functionpanel.zoom.button.text.color =
# Default value (system dependent)
functionpanel.zoom.button.border.color =
# Default value (Arial-plain-16)
functionpanel.zoom.button.font =
# Default value (80,25)
functionpanel.zoom.button.size = 70, 25
# Default value (18) if the number of buttons < 3
# Default value (12) if the number of buttons = 3
functionpanel.zoom.button.horizontal.space =
# Default value (10)
functionpanel.zoom.button.vertical.space =


#-----------------------------------------------------------------------
#                           Display size
#-----------------------------------------------------------------------
# The following lines will define the default display size, and thereby 
# also the size of the image.
#
# Size is defined by entering a zoom value.
# The zoom value is entered as a floating point value. eg. 0.25 or 0.33, 
# or by using the "FIT" expression.
# By choosing "FIT" as display size, the image is scaled to a size that fit 
# the canvas size, i.e. to the area of the monitor that is not covered by 
# the run panel, task panel and function panel.
# The width and length ratio of the image is maintained. 
# However, if the width and length ratio of the canvas  is different from
# that of the image, the image will fill the canvas in only one direction.
# The image will always be display centered in the canvas.

# If display size is not defined the image will be displayed in original size.

# Several predefined display sizes can be chosen. 
# Buttons for every defined display size will then be added 
# to the function panel, so that the observers easily can change 
# between the predefined display sizes.

# Define the display size
# Default value (original size)
functionpanel.displaysize.default = FIT

# Define additional predefined display sizes.
# A button is added for every definition.
# Name of button is entered as an arbitrary text string, 
# eg. "1:1", "1:2" "Full" or "Half".
# The size of the button is dependent on the size of the text string.
# Additional predefined display sizes are entered as 
# floating point values. eg. 0.25 or 0.33.

# Predefined display sizes and corresponding button names 
functionpanel.displaysize.button1.name = FIT 
functionpanel.displaysize.button1.zoom = fit

functionpanel.displaysize.button2.name = 1:1
functionpanel.displaysize.button2.zoom = 1.0

functionpanel.displaysize.button3.name = 0.3
functionpanel.displaysize.button3.zoom = 0.3

# Colors, fonts and sizes of the predefined display size buttons
# Default value (system dependent)
functionpanel.displaysize.button.color =
# Default value (10,10,10)
functionpanel.displaysize.button.text.color =
# Default value (system dependent)
functionpanel.displaysize.button.border.color =
# Default value (Arial-plain-16)
functionpanel.displaysize.button.font =
# Default button size (75,25)
functionpanel.displaysize.button.size =

# Default value (18) if the number of buttons < 3
# Default value (12) if the number of buttons = 3
functionpanel.displaysize.button.horizontal.space =

#-----------------------------------------------------------------------
#                           CINE-LOOP
#-----------------------------------------------------------------------
#
# The following lines will define the cine-loop properties.
# The frame.interval value defines the time in milliseconds between
# the rendering of each image in a stack.
#

# Specify if it should be possible for the observers to use 
# the Cine-loop feature. If enabled, buttons for starting the 
# cine-loop sequence will be added to the function panel.
# Default value (no)
cineloop = y

# Defines whether the cine-loop should start automatically as soon as a
# new stack is selected and images are available for display.
cineloop.start.auto = n

# Location, color and font of the cine-loop panel 
# Default value (5)
cineloop.space.top =
# Default value (5)
cineloop.panel.alignment.left =
# Default value 5
cineloop.panel.alignment.right =
# Default value (1)
cineloop.panel.alignment.top =
# Default value (5)
cineloop.panel.alignment.bottom =
# Defauly value (240,240,240)
cineloop.panel.color = 211, 211, 211
# Default value (120,120,120)
cineloop.border.color =
# Default value (10,10,10)
cineloop.title.color =
# Default value (SansSerif-plain-16)
cineloop.title.font =

# Define the possible frame interval values. 
# A corresponding button will be created in the cine-loop panel
# for each defined frame interval value 
cineloop.button1.name = 80
# Default value (80)
cineloop.button1.frame.interval.value = 80

cineloop.button2.name = 120
# Default value (80)
cineloop.button2.frame.interval.value = 120

cineloop.button3.name = 1000
# Default value (80)
cineloop.button3.frame.interval.value = 1000

# Colors, fonts and sizes of the cine-loop buttons
# Default value (system dependent)
cineloop.button.color =
# Default value (system dependent)
cineloop.button.select.color =
# Default value 10,10,10
cineloop.button.text.color =
# Default value (system dependent)
cineloop.button.border.color =
# Default value (Arial-plain-16)
cineloop.button.font =
# Default value (10)
cineloop.button.vertical.space =
# Default value 80,25
cineloop.frameinterval.button.size =
# Default value (18) if the number of buttons < 3
# Default value (8) if the number of buttons = 3
cineloop.frameinterval.button.space.horizontal =
# Default value (100,28)
cineloop.stop.button.size =

#-----------------------------------------------------------------------
#                           LOCALIZATION - global
#-----------------------------------------------------------------------
#
# Creates and set properties for the localization panel. This panel
# contains the "Show/Hide" and "Erase" button. The panel is displayed
# if at least one task is connected to making a localization in the Task Panel.
# A localization marking is made by holding down the "ctrl"-button on 
# the keyboard while clicking with the left mouse button in the image. 
# When a localization marking has been made, the task connected to the 
# localization must be answered before any other event is possible.
#

# Localization, color and font of the localization panel. The color is defined by the red, 
# green and blue components, using a 0-255 scale, eg. 20,20,20.

# Default value (0)
localization.space.top =
# Deafult value (240,240,240)
localization.panel.color = 211, 211, 211
# Default value (0)
localization.panel.alignment.top =
# Default value (10)
localization.panel.alignment.bottom =
# Default value (5)
localization.panel.alignment.left =
# Default value (5)
localization.panel.alignment.right =
# Default value (120,120,120)
localization.border.color =
# Default value (10,10,10)
localization.title.color =
# Default value (SansSerif-plain-16)
localization.title.font =

# Colors, fonts and sizes of the localization buttons ("Show/Hide" and "Erase")
# Default value (system dependent)
localization.button.color =
# Default value (10,10,10)
localization.button.text.color =
# Default value (Arial-plain-16)
localization.button.font =
# Default value (123,32)
localization.button.size =
# Default value (system dependent)
localization.button.border.color =
# Default value (20)
localization.button.space.horizontal =

# Size of the symbol used to show a localization
# This value is used to calculate the size of the localization symbols.
# Default value (75)
localization.symbol.size = 20

# Default value (5)
localization.symbol.line.width = 3

################################ CANVAS ################################
#
#-----------------------------------------------------------------------
#                        Canvas
#-----------------------------------------------------------------------
# Define the color of the canvas. The color is defined by the red, 
# green and blue components, using a 0-255 scale, eg. 20,20,20.

# Default value (0,0,0)
canvas.color =

#
#-----------------------------------------------------------------------
#                        Contextmenu
#-----------------------------------------------------------------------
# The context menu is shown when right clicking the mouse 
# in the image canvas. From the context menu all the features 
# enabled in the function panel can be activated.

# Define the colors of the context menu.The color is defined by the red, 
# green and blue components, using a 0-255 scale, eg. 20,20,20. 

# Define the colors of the context manu
# Default value (240,240,240)
canvas.contextmenu.panel.color =
# Default value (SansSerif-plain-14)
canvas.contextmenu.font =
# Default value (10,10,10)
canvas.contextmenu.font.color =

#-----------------------------------------------------------------------
#                      Interpolation
#-----------------------------------------------------------------------

# Please fill in desired type of interpolation to be used 
# when the image is adjusted to the canvas.
# Up to 4 alternatives can be given.

canvas.contextmenu.interpolation1 = nearest neighbor
canvas.contextmenu.interpolation2 = bilinear
canvas.contextmenu.interpolation3 = bicubic
canvas.contextmenu.interpolation4 = bicubic2


# Default value (nearest)
canvas.interpolation.default = nearest


#-----------------------------------------------------------------------
#                        OVERLAY
#-----------------------------------------------------------------------
#
# Define the font and color used for the overlay text in the canvas. The color is 
# defined by the red, green and blue components, using a 0-255 scale, eg. 20,20,20.
#
# Default value (SansSerif-plain-20)
canvas.overlay.font = SansSerif-plain-20
# Default value (10,220,10)
canvas.overlay.font.color =

# Patient information is only displayed on the canvas 
# in the "Edit mode"  and "Show mode".

# Define if patient information should be displayed 
# in the "Edit mode" and "Show mode".
# Default value (yes)
canvas.overlay.patientinfo =

# Define the (x,y) positions for overlay information that can be displayed on
# the canvas.

# Default value for screen resolution 1600x1200 (1000,1060)
# Default value for screen resolution 2048x1536 (1480,1260)
# Default value for screen resolution 1280x1024 (100,860)
canvas.overlay.mouseposition.pixelvalue.pos = 1450,1360

# Default value for screen resolution 1600x1200 (30,930)
# Default value for screen resolution 2048x1536 (30,1230)
# Default value for screen resolution 1280x1024 (100,880)
canvas.overlay.windowcenter.pos = 30,1330

# Default value for screen resolution 1600x1200 (30,900)
# Default value for screen resolution 2048x1536 (30,1200)
# Default value for screen resolution 1280x1024 (100,900)
canvas.overlay.windowwidth.pos = 30,1360

# Default value for screen resolution 1600x1200 (1000,1000)
# Default value for screen resolution 2048x1536 (1480,1200)
# Default value for screen resolution 1280x1024 (900,880)
canvas.overlay.mouseposition.pos.x = 1450,1300

# Default value for screen resolution 1600x1200 (1000,1030)
# Default value for screen resolution 2048x1536 (1480,1230)
# Default value for screen resolution 1280x1024 (100,880)
canvas.overlay.mouseposition.pos.y = 1450,1330

# Default value for screen resolution 1600x1200 (980,80)
# Default value for screen resolution 2048x1536 (1480,80)
# Default value for screen resolution 1280x1024 (800,60)
canvas.overlay.localization.pos.x = 1400,80

# Default value for screen resolution 1600x1200 (980,110)
# Default value for screen resolution 2048x1536 (1480,110)
# Default value for screen resolution 1280x1024 (800,80)
canvas.overlay.localization.pos.y = 1400,110

# Default value for screen resolution 1600x1200 (980,140)
# Default value for screen resolution 2048x1536 (1480,140)
# Default value for screen resolution 1280x1024 (800,100)
canvas.overlay.localization.pos.z = 1400,140

# Only valid in edit-mode
# Default value for screen resolution 1600x1200 (30,1090)
# Default value for screen resolution 2048x1536 (30,1370)
# Default value for screen resolution 1280x1024 (100,60)
canvas.overlay.patientid.pos = 30,70

# Only valid in edit-mode
# Default value for screen resolution 1600x1200 (30,1020)
# Default value for screen resolution 2048x1536 (30,1300)
# Default value for screen resolution 1280x1024 (100,80)
canvas.overlay.stack.no.pos = 30,100

# Only valid in edit-mode
# Default value for screen resolution 1600x1200 (30,1050)
# Default value for screen resolution 2048x1536 (30,1330)
# Default value for screen resolution 1280x1024 (100,100)
canvas.overlay.stack.localization.no.pos = 30,130

#-----------------------------------------------------------------------
#                        DISTANCE MEASUREMENT
#-----------------------------------------------------------------------
#
# Distance measurement is enabled by holding down the "a" button on the keyboard while 
# clicking the left mouse button and dragging the mouse over the image.

# Define the line width and color of the distance measurement tool. The color is 
# defined by the red, green and blue components, using a 0-255 scale, eg. 20,20,20.

# Default value (1)
distance.measurement.drawing.line.width =
# Default value (255,255,10)
distance.measurement.drawing.line.color =

# Default value (SansSerif-plain-20)
distance.measurement.font =
# Default value (10,220,10)
distance.measurement.font.color =

#-----------------------------------------------------------------------
#                        PIXELVALUE MEAN MEASUREMENT
#-----------------------------------------------------------------------
#
# Define the line width and color.
#
#Default value (1)
pixelvalue.measurement.drawing.line.width =
#Default value (255,255,10)
pixelvalue.measurement.drawing.line.color = 0,0,255

# Define the text font and color.
#
#Default value (SansSerif-plain-20)
pixelvalue.measurement.font =
#Default value (10,220,10)
pixelvalue.measurement.font.color = 255,10,10


############################### LOG ####################################
#
#----------------------------------------------------------------
#                       Default log data
#----------------------------------------------------------------
#
# Define the data that should be stored in the log files
# 
# Default log data are:

# Time when logfile started
# Reader/user (user name)
# Image file name (ImageName)                               
# Image number, read order of image (ImageNo)         
# Given answer/score (Result)                   


# The log data of the scores are given as the task number followed by a
# "," and the answer alternative number (the first checkbox corresponding
# to "1" and so on). Answers to different tasks are separated by a "|".
# As an example, the log data "Result:1,3|2,1" correspond to the user 
# clicking the third checkbox on the first task and the first checkbox 
# on the second task.

#----------------------------------------------------------------
#                     Optional log data
#----------------------------------------------------------------
# Define what should be logged into the log file.

# Value of Window Width and Window Center when answers given.
# Default value (yes)
log.data.option-wl = n

# Time spent viewing each case, i.e. time between two 
# activations of the "NEXT" button.
# Default value (yes)
log.data.option-timespent = n

# Optional values from DICOM header. For each wanted value 
# please define DICOM tag code (xxxx,yyyy).
# and the text that will be written in log-file before tag value.

# DICOM tag for SOP instance UID (0008,0018)
# log.data.option-1.tag = 0008,0018
# log.data.option-1.text = SOPInstUID

# DICOM tag for Patient ID (0010,0020)
# log.data.option-2.tag = 0010,0020
# log.data.option-2.text = patID

# DICOM tag for Modality (0008,0060)
# log.data.option-3.tag = 0008,0060 
# log.data.option-3.text = Modality

# DICOM tag for Photometric Interpretation (0028,0004)
# log.data.option-4.tag = 0028,0004 
# log.data.option-4.text = PhotometricInterpretation 

# DICOM tag for Bit Stored (0028,0101)
# log.data.option-5.tag = 0028,0101 
# log.data.option-5.text = BitStored

# DICOM tag for Aqusition Time (0008,0032)
# log.data.option-6.tag = 0008,0032 
# log.data.option-6.text = AcquisitionTime 

# DICOM tag for Exposure Time (0018,1150)
# log.data.option-7.tag = 0018,1150
# log.data.option-7.text = ExposureTime 

# DICOM tag for (xxxx,yyyy)
# log.data.option-8.tag = 
# log.data.option-8.text = 

#----------------------------------------------------------------
#                     Demo-mode log data
#----------------------------------------------------------------
# Define if the user-demo log files shall be deleted when the
# demo login session restart (y/n). If the files are deleted the study
# can be run all over again. 
# Default value (yes)
delete.demo-log =

########################### IMAGE & STACK################################
# Specify if the image canvas should go black in the timeframe between the
# activation of the "NEXT" button and the next case is displayed. 
# Default value (no)
image-display.black-to-next = y

# Specify if there should be a delay time before a new case is displayed 
# after activation of the "NEXT" button. The value is given in milliseconds.
# Default value (0)
image-display.delay-to-next =

#
# Define if images in the case should be loaded as a background
# process. Each image is available for display when loaded.
# Default value (n)
stack.load.background = y
 
# Specify the viewing order when images and stacks are mixed in the imagedb
# directory. The sorting values possible are "sequence" or "random".

# Default value (random)
stack-images.viewing-order =

# Note: The viewing order for images (imagefiles) in a stack is
# always the "natural" order based on the 'Instans Number'. 
# There is no property to change this order.


############################## DISPLAY #################################
# Assign a pseudocolor lookup table to a grayscale image.
# The CLUT (Color Lookup Tables) are read from a plain textfile stored in the
# lut directory (.\\lut). The format of the file is "name.lut").

# Examples of CLUT files are GE-Col and Hotiron. 
color-lookup-tables = GE-Col

# Mouse Windowing mode
# Applicable for NM and MR images
# Mouse Fixed Minimum Mode is defined if a value is entered. x: Maximum
# y: Nothing
# Default value (Mouse Classic Mode. x: Window Width, y: Window Level)
fixed-minimum.value = 10

# Define the (x,y) positions for overlay information displayed on the canvas.
# Default value for screen resolution 1600x1200 (30,980)
# Default value for screen resolution 2048x1536 (30,1280)
canvas.overlay.fixed-minimum.pos =


############################## EYE TRACKING ############################
# Default value (no)
eyetracking = 
# The internet address and the port number for the host machine running
# the "eye tracking" software.
# Default value (localhost)(127.0.0.1)
eyetracking.hostname = 127.0.0.1
# Default value (4445)
eyetracking.port =
# Default value (rabbit) NOT IN USE:
eyetracking.message =
# Default value (c:\\eyetracking
eyetracking.filepath = c:\\pontus
# Default value (yes)
eyetracking.loadingstack.renderimage = no
# Default value (30,30,30)
eyetracking.loadingstack.canvas.color = 100,100,100


# end


